{"version":3,"file":"gojs-angular.js","sources":["../../../projects/gojs-angular/src/lib/diagram.component.ts","../../../projects/gojs-angular/src/lib/palette.component.ts","../../../projects/gojs-angular/src/lib/overview.component.ts","../../../projects/gojs-angular/src/lib/gojs-angular.module.ts","../../../projects/gojs-angular/src/lib/data-sync.service.ts"],"names":["go.Diagram","go.GraphLinksModel","go.Overview","go.Spot","go.Map"],"mappings":"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","sourcesContent":["import { Component, ElementRef, EventEmitter, Input, IterableDiffers, IterableDiffer, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild, KeyValueChangeRecord } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { dashCaseToCamelCase } from '@angular/compiler/src/util';\r\n\r\n@Component({\r\n  selector: 'gojs-diagram',\r\n  template: '<div #ngDiagram [className]=divClassName></div>'\r\n})\r\nexport class DiagramComponent {\r\n\r\n  /**\r\n   * Diagram initialization function. Returns a go.Diagram.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initDiagram: () => go.Diagram;\r\n\r\n  // Node data for diagram\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for diagram\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null; // optional\r\n\r\n  // Model data for diagram\r\n  @Input() public modelData: go.ObjectData = null; // optional\r\n\r\n  // Diagram div class name. Use this name to style your diagram in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for diagram\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  @Input()\r\n  public skipsDiagramUpdate: boolean = false;\r\n\r\n  // event emitter -- fires when diagram model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngDiagram', { static: true }) public diagramDiv: ElementRef;\r\n  public diagram: go.Diagram = null;\r\n\r\n  // differs for array inputs (node / link data arrays)\r\n  private _ndaDiffer: KeyValueDiffer<string, any>;\r\n  private _ldaDiffer: KeyValueDiffer<string, any>;\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._kvdiffers.find([]).create();\r\n    this._ldaDiffer = this._kvdiffers.find([]).create();\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  }\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    this.diagram = this.initDiagram();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the diagram,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.diagram.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.diagramDiv.nativeElement;\r\n    if (divRef === null) return;\r\n    this.diagram.div = divRef;\r\n\r\n    // initialize the Diagram's model\r\n    this.diagram.delayInitialization(() => {\r\n      const model = this.diagram.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.diagram.addModelChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngAfterViewInit\r\n\r\n\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n\r\n\r\n    \r\n    \r\n    if (!this.diagram) return;\r\n    if (!this.diagram.model) return;\r\n\r\n    // these need to be run each check, even if no merging happens\r\n    // otherwise, they will detect all diffs that happened since last time skipsDiagram was false,\r\n    // such as remove ops that happened in GoJS when skipsDiagram = true, \r\n    // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)\r\n    // Angular differs are a lot of fun\r\n    var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);\r\n\r\n    if (this.skipsDiagramUpdate) return;\r\n\r\n    function compareObjs(obj1, obj2) {\r\n      // Loop through properties in object 1\r\n      for (const p in obj1) {\r\n        // Check property exists on both objects\r\n        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\r\n\r\n        switch (typeof (obj1[p])) {\r\n          // Deep compare objects\r\n          case 'object':\r\n            if (!compareObjs(obj1[p], obj2[p])) return false;\r\n            break;\r\n          // Compare values\r\n          default:\r\n            if (obj1[p] !== obj2[p]) return false;\r\n        }\r\n      }\r\n\r\n      // Check object 2 for any extra properties\r\n      for (const p in obj2) {\r\n        if (typeof (obj1[p]) === 'undefined') return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    var dc = this;\r\n    // merges changes from app data into GoJS model data, \r\n    // making sure only actual changes (and not falsely flagged no-ops on array / obj data props) are logged\r\n    function mergeChanges(kvchanges, str): boolean {\r\n      if (!dc.diagram || !dc.diagram.model) return;\r\n\r\n      if (kvchanges) {\r\n        kvchanges.forEachAddedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          switch (str) {\r\n            case \"n\": {\r\n              dc.diagram.model.addNodeData(r.currentValue);\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              var m = <go.GraphLinksModel>dc.diagram.model;\r\n              m.addLinkData(r.currentValue);\r\n              break;\r\n            }\r\n          }\r\n        });\r\n        kvchanges.forEachRemovedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          switch (str) {\r\n            case \"n\": {\r\n              var node = dc.diagram.findNodesByExample(r.previousValue).first();\r\n              dc.diagram.remove(node);\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              var link = dc.diagram.findLinksByExample(r.previousValue).first();\r\n              dc.diagram.remove(link);\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        kvchanges.forEachChangedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          const curVal = r.currentValue;\r\n          const pVal = r.previousValue;\r\n          \r\n          // ensure \"changes\" to array / object / enumerable data properties are legit\r\n          const sameVals = compareObjs(curVal, pVal);\r\n          if (!sameVals) {\r\n            switch (str) {\r\n              case \"n\": {\r\n                var node = dc.diagram.findNodesByExample(r.previousValue).first();\r\n                dc.diagram.model.assignAllDataProperties(node.data, r.currentValue);\r\n                break;\r\n              }\r\n              case \"l\": {\r\n                var link = dc.diagram.findLinksByExample(r.previousValue).first();\r\n                dc.diagram.model.assignAllDataProperties(link.data, r.currentValue);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          \r\n        });\r\n      }\r\n      \r\n    }\r\n\r\n    // don't need model change listener while performing known data updates\r\n    if (this.modelChangedListener !== null) this.diagram.model.removeChangedListener(this.modelChangedListener);\r\n\r\n    this.diagram.model.startTransaction('update data');\r\n    // var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    mergeChanges(nodeDiffs, \"n\");\r\n    mergeChanges(linkDiffs, \"l\");\r\n    this.diagram.model.assignAllDataProperties(this.diagram.model.modelData, this.modelData);\r\n    this.diagram.model.commitTransaction('update data');\r\n    // reset the model change listener\r\n    if (this.modelChangedListener !== null) this.diagram.model.addChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update diagram data accordingly\r\n   */\r\n  // public updateFromAppData() {\r\n  //   if (!this.diagram) return;\r\n  //   const model = this.diagram.model;\r\n\r\n  //   // don't need model change listener while performing known data updates\r\n  //   if (this.modelChangedListener !== null) model.removeChangedListener(this.modelChangedListener);\r\n\r\n  //   model.startTransaction('update data');\r\n  //   model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n  //   if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n  //     model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n  //   }\r\n  //   if (this.modelData) {\r\n  //     model.assignAllDataProperties(model.modelData, this.modelData);\r\n  //   }\r\n  //   model.commitTransaction('update data');\r\n\r\n  //   // reset the model change listener\r\n  //   if (this.modelChangedListener !== null) model.addChangedListener(this.modelChangedListener);\r\n\r\n  // }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, IterableDiffers, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n@Component({\r\n  selector: 'gojs-palette',\r\n  template: '<div #ngPalette [className]=divClassName></div>'\r\n})\r\nexport class PaletteComponent {\r\n\r\n  /**\r\n   * Palette initialization function. Returns a go.Palette.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initPalette: () => go.Palette;\r\n\r\n  // Node data for palette\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for palette. Optional\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n\r\n  // Model data for palette. Optional\r\n  @Input() public modelData: go.ObjectData = null;\r\n\r\n  // Palette div class name. Use this name to style your palette in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for palette\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  // event emitter -- fires when palette model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngPalette', { static: true }) public paletteDiv: ElementRef;\r\n\r\n  // The Palette itself\r\n  public palette: go.Palette | null = null;\r\n\r\n  // Differs for array Inputs (link / node data arrays)\r\n  public _ndaDiffer: any;\r\n  public _ldaDiffer: any;\r\n\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._differs.find([]).create(null);\r\n    this._ldaDiffer = this._differs.find([]).create(null);\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  } // end constructor\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initialize Palette after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.paletteDiv) return;\r\n\r\n    this.palette = this.initPalette();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the palette,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.palette.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.paletteDiv.nativeElement;\r\n    this.palette.div = divRef;\r\n\r\n    // initialize palette model\r\n    this.palette.delayInitialization(() => {\r\n      const model = this.palette.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.palette.addModelChangedListener(this.modelChangedListener);\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n    const nodeDataArrayChanges = this._ndaDiffer.diff(this.nodeDataArray);\r\n    const linkDataArrayChanges = this._ldaDiffer.diff(this.linkDataArray);\r\n    let modelDataChanges = null;\r\n    if (this._mdDiffer) {\r\n      modelDataChanges = this._mdDiffer.diff(this.modelData);\r\n    }\r\n    if (nodeDataArrayChanges || linkDataArrayChanges || modelDataChanges) {\r\n      this.updateFromAppData();\r\n    }\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update palette data accordingly\r\n   */\r\n  public updateFromAppData() {\r\n    if (!this.palette) return;\r\n    const model = this.palette.model;\r\n\r\n    model.startTransaction('update data');\r\n    model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n    if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n      model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n    }\r\n    if (this.modelData) {\r\n      model.assignAllDataProperties(model.modelData, this.modelData);\r\n    }\r\n    model.commitTransaction('update data');\r\n\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Input, NgZone, SimpleChanges, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-overview',\r\n  template: '<div #ngOverview [className]=divClassName></div>'\r\n})\r\nexport class OverviewComponent {\r\n\r\n  // The function used to initialize the Overview\r\n  @Input() public initOverview: () => go.Overview;\r\n\r\n  // Overview div class name. Use this name to style your Overview in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // The Diagram to observe with the Overview\r\n  @Input() public observedDiagram: go.Diagram = null;\r\n\r\n  @ViewChild('ngOverview', { static: true }) public overviewDiv: ElementRef;\r\n\r\n  // The Overview itself\r\n  public overview: go.Overview | null = null;\r\n\r\n  constructor(public zone: NgZone) { }\r\n\r\n  /**\r\n   * Initialize the overview\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.overviewDiv) return;\r\n    if (this.initOverview) {\r\n      this.overview = this.initOverview();\r\n    } else {\r\n      this.overview = new go.Overview();\r\n      this.overview.contentAlignment = go.Spot.Center;\r\n    }\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the overview,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.overview.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.overview.div = this.overviewDiv.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.overview) return;\r\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n      this.overview.observed = changes.observedDiagram.currentValue;\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DiagramComponent } from './diagram.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { PaletteComponent } from './palette.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ]\r\n})\r\nexport class GojsAngularModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSyncService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @returns A node data array, merged with the changes\r\n   */\r\n  public static syncNodeData(changes: go.IncrementalData, nodeData: Array<go.ObjectData>) {\r\n    if (!changes) return nodeData;\r\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedNodesMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified node data\r\n    if (changes.modifiedNodeData) {\r\n      changes.modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n        modifiedNodesMap.set(nd.key, nd);\r\n        const key = nd.key;\r\n        for (let i = 0; i < nodeData.length; i++) {\r\n          const ndEntry = nodeData[i];\r\n          if (ndEntry.key === key) {\r\n            nodeData[i] = nd;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted node data\r\n    if (changes.insertedNodeKeys) {\r\n      changes.insertedNodeKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedNodesMap.get(key);\r\n        if (nd) {\r\n          nodeData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed node data\r\n    if (changes.removedNodeKeys) {\r\n      nodeData = nodeData.filter((nd: go.ObjectData) => {\r\n        if (changes.removedNodeKeys.includes(nd.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return nodeData;\r\n  }\r\n\r\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @returns A link data array, merged with the changes\r\n   */\r\n  public static syncLinkData(changes: go.IncrementalData, linkData: Array<go.ObjectData>) {\r\n    if (!changes) return linkData;\r\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedLinksMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified link data\r\n    if (changes.modifiedLinkData) {\r\n      changes.modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n        modifiedLinksMap.set(ld.key, ld);\r\n        const key = ld.key;\r\n        for (let i = 0; i < linkData.length; i++) {\r\n          const ldEntry = linkData[i];\r\n          if (ldEntry.key === key) {\r\n            linkData[i] = ld;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted link data\r\n    if (changes.insertedLinkKeys) {\r\n      changes.insertedLinkKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedLinksMap.get(key);\r\n        if (nd) {\r\n          linkData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed link data\r\n    if (changes.removedLinkKeys) {\r\n      linkData = linkData.filter((ld: go.ObjectData) => {\r\n        if (changes.removedLinkKeys.includes(ld.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return linkData;\r\n  }\r\n\r\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\r\n  public static syncModelData(changes: go.IncrementalData, modelData: go.ObjectData) {\r\n    if (!changes) return modelData;\r\n    if (!changes.modelData) return modelData;\r\n    if (changes.modelData) {\r\n      return changes.modelData;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]}